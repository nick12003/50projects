{"version":3,"sources":["components/RandomChoicePicker.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["RandomChoicePicker","styled","className","useState","textarea","setTextarea","diable","setDiable","tags","setTags","useEffect","placeholder","value","disabled","onChange","e","target","split","filter","tag","trim","map","highlight","onKeyUp","keyCode","interval","setInterval","randomTag","Math","floor","random","length","arr","setTimeout","clearInterval","times","i","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"qKAgEMA,EAAqBC,aA7DT,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACjB,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAKA,OAHAC,qBAAU,cAEP,IAEC,qBAAKR,UAAWA,EAAhB,SACI,sBAAKA,UAAU,YAAf,UACI,qFAAuD,uBAAvD,mCACA,0BACIS,YAAY,wBACZC,MAAOR,EACPS,SAAUP,EACVQ,SAAU,SAACC,GACPV,EAAYU,EAAEC,OAAOJ,OACrBH,EAAQM,EAAEC,OAAOJ,MAAMK,MAAM,KAAKC,QAAO,SAAAC,GAAG,MAAmB,KAAfA,EAAIC,UAAeC,KAAI,SAAAF,GAAS,MAAO,CAAEA,IAAKA,EAAIC,OAAQE,WAAW,QACtHC,QAAS,SAACR,GACT,GAAkB,KAAdA,EAAES,QAAgB,CAClBjB,GAAU,GACV,IACMkB,EAAWC,aAAY,WACzB,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWtB,EAAKuB,QAC9CC,EAAG,YAAOxB,GACdwB,EAAIL,GAAWL,WAAY,EAC3Bb,EAAQuB,GAERC,YAAW,WACPD,EAAIL,GAAWL,WAAY,EAC3Bb,EAAQuB,KACT,OACJ,KAEHC,YAAW,WACPC,cAAcT,GACdQ,YAAW,WACP,IAAMN,EAAYC,KAAKC,MAAMD,KAAKE,SAAWtB,EAAKuB,QAC9CC,EAAG,YAAOxB,GACdwB,EAAIL,GAAWL,WAAY,EAC3Bb,EAAQuB,GACRzB,GAAU,GACVF,EAAY,MACb,OAEJ8B,SAGf,8BAEQ3B,EAAKa,KAAI,WAAqBe,GAAO,IAAzBjB,EAAwB,EAAxBA,IAAKG,EAAmB,EAAnBA,UACb,OAAO,sBAAcpB,UAAS,cAASoB,EAAY,YAAc,IAA1D,SAAiEH,GAAtDiB,eASnBnC,CAAH,ipCAyDTD,a,0FCrHA,SAASqC,EAAmBL,GACzC,OCJa,SAA4BA,GACzC,GAAIM,MAAMC,QAAQP,GAAM,OAAO,OAAAQ,EAAA,GAAiBR,GDGzC,CAAkBA,IELZ,SAA0BS,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBT,IAAQ,OAAAc,EAAA,GAA2Bd,IGLvE,WACb,MAAM,IAAIe,UAAU,wIHIwE","file":"static/js/15.adfde435.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst Container = ({ className }) => {\r\n    const [textarea, setTextarea] = useState(\"\");\r\n    const [diable, setDiable] = useState(false);\r\n    const [tags, setTags] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n    return (\r\n        <div className={className}>\r\n            <div className=\"container\">\r\n                <h3>Enter all of the choices divided by a comma (','). <br /> Press enter when you're done</h3>\r\n                <textarea\r\n                    placeholder=\"Enter choices here...\"\r\n                    value={textarea}\r\n                    disabled={diable}\r\n                    onChange={(e) => {\r\n                        setTextarea(e.target.value);\r\n                        setTags(e.target.value.split(',').filter(tag => tag.trim() !== '').map(tag => { return { tag: tag.trim(), highlight: false } }));\r\n                    }} onKeyUp={(e) => {\r\n                        if (e.keyCode === 13) {\r\n                            setDiable(true);\r\n                            const times = 30\r\n                            const interval = setInterval(() => {\r\n                                const randomTag = Math.floor(Math.random() * tags.length);\r\n                                let arr = [...tags];\r\n                                arr[randomTag].highlight = true;\r\n                                setTags(arr);\r\n\r\n                                setTimeout(() => {\r\n                                    arr[randomTag].highlight = false;\r\n                                    setTags(arr);\r\n                                }, 100)\r\n                            }, 100);\r\n\r\n                            setTimeout(() => {\r\n                                clearInterval(interval)\r\n                                setTimeout(() => {\r\n                                    const randomTag = Math.floor(Math.random() * tags.length);\r\n                                    let arr = [...tags];\r\n                                    arr[randomTag].highlight = true;\r\n                                    setTags(arr);\r\n                                    setDiable(false);\r\n                                    setTextarea(\"\");\r\n                                }, 100)\r\n\r\n                            }, times * 100);\r\n                        }\r\n                    }}></textarea>\r\n                <div>\r\n                    {\r\n                        tags.map(({ tag, highlight }, i) => {\r\n                            return <span key={i} className={`tag ${highlight ? \"highlight\" : \"\"}`}>{tag}</span>\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst RandomChoicePicker = styled(Container)`\r\n    & {\r\n        background-color: #2b88f0;\r\n        font-family: 'Muli', sans-serif;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        height: calc(100vh - 80px);\r\n        position: relative;\r\n        top: 80px;\r\n        overflow: hidden;\r\n        margin: 0;\r\n    }\r\n    \r\n    h3 {\r\n        color: #fff;\r\n        margin: 10px 0 20px;\r\n        text-align: center;\r\n    }\r\n    \r\n    .container {\r\n        width: 500px;\r\n    }\r\n    \r\n    textarea {\r\n        border: none;\r\n        display: block;\r\n        width: 100%;\r\n        height: 100px;\r\n        font-family: inherit;\r\n        padding: 10px;\r\n        margin: 0 0 20px;\r\n        font-size: 16px;\r\n    }\r\n    \r\n    .tag {\r\n        background-color: #f0932b;\r\n        color: #fff;\r\n        border-radius: 50px;\r\n        padding: 10px 20px;\r\n        margin: 0 5px 10px 0;\r\n        font-size: 14px;\r\n        display: inline-block;\r\n    }\r\n    \r\n    .tag.highlight {\r\n        background-color: #273c75;\r\n    }\r\n\r\n    @media (max-width: 576px) {\r\n        .container {\r\n            width: 300px;\r\n        }\r\n    }\r\n`\r\n\r\nexport default RandomChoicePicker\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}