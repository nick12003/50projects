{"version":3,"sources":["components/DrawingApp.js"],"names":["DrawingApp","styled","className","useState","color","setColor","size","setSize","width","setW","height","setH","canvasRef","useRef","context","pressed","setPressed","undefined","offsetX","setOffsetX","offsetY","setOffsetY","device","setDevice","handleRWD","window","innerWidth","useEffect","addEventListener","removeEventListener","useRWD","current","getContext","ref","onMouseDown","e","x","clientX","target","offsetLeft","y","clientY","offsetTop","onMouseUp","onMouseMove","x2","y2","beginPath","arc","Math","PI","fillStyle","fill","x1","y1","moveTo","lineTo","strokeStyle","lineWidth","stroke","drawLine","style","onClick","type","value","onChange","clearRect"],"mappings":"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","file":"static/js/32.dcd00c2c.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst useRWD = () => {\r\n    const [device, setDevice] = useState(\"mobile\");\r\n    const handleRWD = () => {\r\n        if (window.innerWidth > 850)\r\n            setDevice(\"PC\");\r\n        else if (window.innerWidth > 550)\r\n            setDevice(\"tablet\");\r\n        else\r\n            setDevice(\"mobile\");\r\n    }\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleRWD);\r\n        handleRWD();\r\n        return (() => {\r\n            window.removeEventListener('resize', handleRWD);\r\n        })\r\n    }, []);\r\n    return device;\r\n}\r\n\r\nconst Container = ({ className }) => {\r\n    const [color, setColor] = useState(\"#000000\");\r\n    const [size, setSize] = useState(10);\r\n    const [width, setW] = useState(0);\r\n    const [height, setH] = useState(0);\r\n    const canvasRef = useRef();\r\n    const context = useRef();\r\n    const [pressed, setPressed] = useState(false);\r\n    const [offsetX, setOffsetX] = useState(undefined);\r\n    const [offsetY, setOffsetY] = useState(undefined);\r\n\r\n    const drawCircle = (x, y) => {\r\n        context.current.beginPath();\r\n        context.current.arc(x, y, size, 0, Math.PI * 2);\r\n        context.current.fillStyle = color;\r\n        context.current.fill();\r\n    }\r\n\r\n    const drawLine = (x1, y1, x2, y2) => {\r\n        context.current.beginPath();\r\n        context.current.moveTo(x1, y1);\r\n        context.current.lineTo(x2, y2);\r\n        context.current.strokeStyle = color;\r\n        context.current.lineWidth = size * 2;\r\n        context.current.stroke();\r\n    }\r\n\r\n    const drawClear = () => {\r\n        context.current.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    const device = useRWD();\r\n    useEffect(() => {\r\n        switch (device) {\r\n            case \"PC\":\r\n                setW(800);\r\n                setH(600);\r\n                break;\r\n            case \"tablet\":\r\n                setW(500);\r\n                setH(600);\r\n                break;\r\n            case \"mobile\":\r\n                setW(300);\r\n                setH(400);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [device]);\r\n    useEffect(() => {\r\n        context.current = canvasRef.current.getContext('2d');\r\n    }, []);\r\n    return (\r\n        <div className={className}>\r\n            <canvas ref={canvasRef} width={width} height={height}\r\n                onMouseDown={(e) => {\r\n                    setPressed(true);\r\n                    let x = e.clientX - e.target.offsetLeft;\r\n                    let y = e.clientY - 80 - e.target.offsetTop;\r\n                    setOffsetX(x);\r\n                    setOffsetY(y);\r\n                }}\r\n                onMouseUp={(e) => {\r\n                    setPressed(false);\r\n                    setOffsetX(undefined);\r\n                    setOffsetY(undefined);\r\n                }}\r\n                onMouseMove={(e) => {\r\n                    if (pressed) {\r\n                        let x2 = e.clientX - e.target.offsetLeft;\r\n                        let y2 = e.clientY - 80 - e.target.offsetTop;\r\n                        drawCircle(x2, y2);\r\n                        drawLine(offsetX, offsetY, x2, y2);\r\n                        setOffsetX(x2);\r\n                        setOffsetY(y2);\r\n                    }\r\n                }} />\r\n            <div className=\"toolbox\" style={{ width: width + \"px\" }}>\r\n                <button onClick={() => {\r\n                    if (size > 5)\r\n                        setSize(size - 5);\r\n                }}>-</button>\r\n                <span>{size}</span>\r\n                <button onClick={() => {\r\n                    if (size < 50)\r\n                        setSize(size + 5);\r\n                }}>+</button>\r\n                <input type=\"color\" value={color} onChange={(e) => {\r\n                    setColor(e.target.value);\r\n                }} />\r\n                <button onClick={drawClear}>X</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst DrawingApp = styled(Container)`\r\n    & {\r\n        background-color: #f5f5f5;\r\n        font-family: 'Roboto', sans-serif;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        height: calc(100vh - 80px);\r\n        position: relative;\r\n        top: 80px;\r\n        margin: 0;\r\n    }\r\n    \r\n    canvas {\r\n        border: 2px solid steelblue;\r\n    }\r\n    \r\n    .toolbox {\r\n        background-color: steelblue;\r\n        border: 1px solid slateblue;\r\n        display: flex;\r\n        padding: 1rem;\r\n        justify-content: space-around;\r\n    }\r\n    \r\n    .toolbox > * {\r\n        background-color: #fff;\r\n        border: none;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        cursor: pointer;\r\n        margin-left: 0.5rem;\r\n        padding: 0.2rem;\r\n        height: 2.5rem;\r\n        width: 2.5rem;\r\n    }\r\n\r\n    .toolbox > *:last-child {\r\n        margin-left: auto;\r\n    }\r\n`\r\n\r\nexport default DrawingApp\r\n"],"sourceRoot":""}