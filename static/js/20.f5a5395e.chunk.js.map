{"version":3,"sources":["components/VerifyAccountUi.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["VerifyAccountUi","styled","className","useState","Array","fill","map","i","value","ref","createRef","inputs","setInputs","type","placeholder","min","max","required","onChange","e","inputValue","target","length","finalValue","parseInt","items","current","focus","onKeyDown","key","_toConsumableArray","arr","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"qKA+DMA,EAAkBC,aA5DN,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACjB,EAA4BC,mBAASC,MAAM,GAAGC,OAAOC,KAAI,SAAAC,GACrD,MAAO,CAAEC,MAAO,GAAIC,IAAKC,2BAD7B,mBAAOC,EAAP,KAAeC,EAAf,KAIA,OACI,qBAAKV,UAAWA,EAAhB,SACI,sBAAKA,UAAU,YAAf,UACI,qDACA,yFAA2D,uBAA3D,0DACA,qBAAKA,UAAU,iBAAf,SAEQS,EAAOL,KAAI,WAAiBC,GAAO,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,IACjB,OAAO,uBAEHA,IAAKA,EACLI,KAAK,SACLX,UAAU,OACVY,YAAY,IACZC,IAAI,IACJC,IAAI,IACJR,MAAOA,EACPS,UAAQ,EACRC,SAAU,SAACC,GACP,IAAIC,EAAaD,EAAEE,OAAOb,MAC1B,GAAIY,EAAWE,OAAS,EAAG,CACvB,IAAIC,EAAaH,EAAWA,EAAWE,OAAS,GAChD,GAAIE,SAASD,IAAe,GAAKC,SAASD,IAAe,EAAG,CACxD,IAAIE,EAAK,YAAOd,GAChBc,EAAMlB,GAAGC,MAAQe,EACjBX,EAAUa,GACNlB,EAAII,EAAOW,OAAS,GACpBX,EAAOJ,EAAI,GAAGE,IAAIiB,QAAQC,WAM1CC,UAAW,SAACT,GACR,GAAc,cAAVA,EAAEU,IAAqB,CACvB,IAAIJ,EAAK,YAAOd,GAChBc,EAAMlB,GAAGC,MAAQ,GACjBI,EAAUa,GACNlB,EAAI,GACJI,EAAOJ,EAAI,GAAGE,IAAIiB,QAAQC,WA9BjCpB,QAsCrB,uBAAOL,UAAU,OAAjB,kHAQQD,CAAH,wpDA4END,a,0FCvIA,SAAS8B,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAI3B,MAAM4B,QAAQD,GAAM,OAAO,OAAAE,EAAA,GAAiBF,GDGzC,CAAkBA,IELZ,SAA0BG,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAO9B,MAAMkC,KAAKJ,GFIvD,CAAgBH,IAAQ,OAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE","file":"static/js/20.f5a5395e.chunk.js","sourcesContent":["import React, { useState, createRef } from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst Container = ({ className }) => {\r\n    const [inputs, setInputs] = useState(Array(6).fill().map(i => {\r\n        return { value: \"\", ref: createRef() }\r\n    }));\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div className=\"container\">\r\n                <h2>Verify Your Account</h2>\r\n                <p>We emailed you the six digit code to cool_guy@email.com <br /> Enter the code below to confirm your email address.</p>\r\n                <div className=\"code-container\">\r\n                    {\r\n                        inputs.map(({ value, ref }, i) => {\r\n                            return <input\r\n                                key={i}\r\n                                ref={ref}\r\n                                type=\"number\"\r\n                                className=\"code\"\r\n                                placeholder=\"0\"\r\n                                min=\"0\"\r\n                                max=\"9\"\r\n                                value={value}\r\n                                required\r\n                                onChange={(e) => {\r\n                                    let inputValue = e.target.value;\r\n                                    if (inputValue.length > 0) {\r\n                                        let finalValue = inputValue[inputValue.length - 1];\r\n                                        if (parseInt(finalValue) >= 0 && parseInt(finalValue) <= 9) {\r\n                                            let items = [...inputs];\r\n                                            items[i].value = finalValue;\r\n                                            setInputs(items);\r\n                                            if (i < inputs.length - 1) {\r\n                                                inputs[i + 1].ref.current.focus();\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                }}\r\n                                onKeyDown={(e) => {\r\n                                    if (e.key === \"Backspace\") {\r\n                                        let items = [...inputs];\r\n                                        items[i].value = \"\";\r\n                                        setInputs(items);\r\n                                        if (i > 0) {\r\n                                            inputs[i - 1].ref.current.focus();\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            />\r\n                        })\r\n                    }\r\n                </div>\r\n                <small className=\"info\">\r\n                    This is design only. We didn't actually send you an email as we don't have your email, right?\r\n                </small>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst VerifyAccountUi = styled(Container)`\r\n    & {\r\n        background-color: #fbfcfe;\r\n        font-family: 'Muli', sans-serif;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        height: calc(100vh - 80px);\r\n        position: relative;\r\n        top: 80px;\r\n        overflow: hidden;\r\n        margin: 0;\r\n    }\r\n    \r\n    .container {\r\n        background-color: #fff;\r\n        border: 3px #000 solid;\r\n        border-radius: 10px;\r\n        padding: 30px;\r\n        max-width: 1000px;\r\n        text-align: center;\r\n    }\r\n    \r\n    .code-container {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        margin: 40px 0;\r\n    }\r\n    \r\n    .code {\r\n        border-radius: 5px;\r\n        font-size: 75px;\r\n        height: 120px;\r\n        width: 100px;\r\n        border: 1px solid #eee;\r\n        margin: 1%;\r\n        text-align: center;\r\n        font-weight: 300;\r\n        -moz-appearance: textfield;\r\n    }\r\n    \r\n    .code::-webkit-outer-spin-button,\r\n    .code::-webkit-inner-spin-button {\r\n        -webkit-appearance: none;\r\n        margin: 0;\r\n    }\r\n    \r\n    .code:valid {\r\n        border-color: #3498db;\r\n        box-shadow: 0 10px 10px -5px rgba(0, 0, 0, 0.25);\r\n    }\r\n    \r\n    .info {\r\n        background-color: #eaeaea;\r\n        display: inline-block;\r\n        padding: 10px;\r\n        line-height: 20px;\r\n        max-width: 400px;\r\n        color: #777;\r\n        border-radius: 5px;\r\n    }\r\n    \r\n    @media (max-width: 600px) {\r\n        .code-container {\r\n        flex-wrap: wrap;\r\n        }\r\n    \r\n        .code {\r\n        font-size: 60px;\r\n        height: 80px;\r\n        max-width: 70px;\r\n        }\r\n    }\r\n`\r\n\r\nexport default VerifyAccountUi\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}