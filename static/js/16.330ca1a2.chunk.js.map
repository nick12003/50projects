{"version":3,"sources":["components/ScrollAnimation.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["ProgressSteps","styled","className","device","useState","setDevice","handleRWD","window","innerWidth","useEffect","addEventListener","removeEventListener","useRWD","bodyRef","useRef","Array","fill","map","i","createRef","boxs","setBoxs","getting","setGetting","body","current","checkBoxes","ch","clientHeight","triggerBottom","forEach","box","getBoundingClientRect","top","classList","add","remove","scrollTop","scrollHeight","setTimeout","id","ref","_toConsumableArray","arr","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"qKAwEMA,EAAgBC,aAjDJ,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACXC,EArBK,WACX,MAA4BC,mBAAS,UAArC,mBAAOD,EAAP,KAAeE,EAAf,KACMC,EAAY,WACVC,OAAOC,WAAa,IACpBH,EAAU,MACLE,OAAOC,WAAa,IACzBH,EAAU,UAEVA,EAAU,WASlB,OAPAI,qBAAU,WAGN,OAFAF,OAAOG,iBAAiB,SAAUJ,GAClCA,IACQ,WACJC,OAAOI,oBAAoB,SAAUL,MAE1C,IACIH,EAIQS,GACTC,EAAUC,mBAChB,EAAwBV,mBAASW,MAAM,IAAIC,OAAOC,KAAI,SAAAC,GAAC,OAAIC,0BAA3D,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BjB,oBAAS,GAAvC,mBAAOkB,EAAP,KAAgBC,EAAhB,KA+BA,OA9BAd,qBAAU,WACN,IAAIe,EAAOX,EAAQY,QACfC,EAAa,WACb,IAAIC,EAAKH,EAAKI,aACRC,EAAgBF,EAAK,IAAiB,WAAXxB,EAAsB,IAAM,KAC7DiB,EAAKU,SAAQ,WAAmBZ,GAAO,IAAda,EAAa,EAAtBN,QACGM,EAAIC,wBAAwBC,IAC9BJ,EACTE,EAAIG,UAAUC,IAAI,QAElBJ,EAAIG,UAAUE,OAAO,WAGpBZ,EAAKa,UACLb,EAAKc,aACCX,EAAK,MAASL,IACzBC,GAAW,GACXgB,YAAW,WACPlB,EAAQ,GAAD,mBAAKD,GAAL,YAAcL,MAAM,GAAGC,OAAOC,KAAI,SAAAC,GAAC,OAAIC,4BAC9CI,GAAW,KACZ,KAMX,OAHAG,IAEAF,EAAKd,iBAAiB,SAAUgB,GACzB,WACHF,EAAKb,oBAAoB,SAAUe,MAExC,CAACvB,EAAQiB,EAAME,IAEd,sBAAKkB,GAAG,OAAOtC,UAAWA,EAAWuC,IAAK5B,EAA1C,UACI,8DAAiCV,KAE7BiB,EAAKH,KAAI,SAACQ,EAASP,GACf,OAAO,qBAAahB,UAAU,WAAWuC,IAAKhB,EAAvC,SACH,0CADaP,WASfjB,CAAH,uwCA6DJD,a,0FCjIA,SAAS0C,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAI5B,MAAM6B,QAAQD,GAAM,OAAO,OAAAE,EAAA,GAAiBF,GDGzC,CAAkBA,IELZ,SAA0BG,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAO/B,MAAMmC,KAAKJ,GFIvD,CAAgBH,IAAQ,OAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE","file":"static/js/16.330ca1a2.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, createRef } from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst useRWD = () => {\r\n    const [device, setDevice] = useState(\"mobile\");\r\n    const handleRWD = () => {\r\n        if (window.innerWidth > 768)\r\n            setDevice(\"PC\");\r\n        else if (window.innerWidth > 576)\r\n            setDevice(\"tablet\");\r\n        else\r\n            setDevice(\"mobile\");\r\n    }\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleRWD);\r\n        handleRWD();\r\n        return (() => {\r\n            window.removeEventListener('resize', handleRWD);\r\n        })\r\n    }, []);\r\n    return device;\r\n}\r\n\r\nconst Container = ({ className }) => {\r\n    const device = useRWD();\r\n    const bodyRef = useRef();\r\n    const [boxs, setBoxs] = useState(Array(10).fill().map(i => createRef()));\r\n    const [getting, setGetting] = useState(false);\r\n    useEffect(() => {\r\n        let body = bodyRef.current;\r\n        let checkBoxes = () => {\r\n            let ch = body.clientHeight;\r\n            const triggerBottom = ch + 80 - (device === \"mobile\" ? 100 : 200);\r\n            boxs.forEach(({ current: box }, i) => {\r\n                const boxTop = box.getBoundingClientRect().top;\r\n                if (boxTop < triggerBottom) {\r\n                    box.classList.add('show');\r\n                } else {\r\n                    box.classList.remove('show');\r\n                }\r\n            });\r\n            let st = body.scrollTop;\r\n            let sh = body.scrollHeight;\r\n            if (st > (sh - ch - 100) && !getting) {\r\n                setGetting(true);\r\n                setTimeout(() => {\r\n                    setBoxs([...boxs, ...Array(5).fill().map(i => createRef())]);\r\n                    setGetting(false);\r\n                }, 1);\r\n            }\r\n        }\r\n        checkBoxes();\r\n\r\n        body.addEventListener('scroll', checkBoxes);\r\n        return () => {\r\n            body.removeEventListener('scroll', checkBoxes);\r\n        }\r\n    }, [device, boxs, getting]);\r\n    return (\r\n        <div id=\"body\" className={className} ref={bodyRef}>\r\n            <h1>Scroll to see the animation {device}</h1>\r\n            {\r\n                boxs.map((current, i) => {\r\n                    return <div key={i} className=\"box show\" ref={current}>\r\n                        <h2>Content</h2>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProgressSteps = styled(Container)`\r\n    & {\r\n        background-color: #efedd6;\r\n        font-family: 'Roboto', sans-serif;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        height: calc(100vh - 80px);\r\n        position: relative;\r\n        top: 80px;\r\n        margin: 0;\r\n        overflow-y: auto;\r\n        overflow-x: hidden;\r\n    }\r\n\r\n    h1 {\r\n        margin: 10px;\r\n    }\r\n    \r\n    .box {\r\n        background-color: steelblue;\r\n        color: #fff;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 400px;\r\n        flex: 0 0 200px;\r\n        margin: 10px;\r\n        border-radius: 10px;\r\n        box-shadow: 2px 4px 5px rgba(0, 0, 0, 0.3);\r\n        transform: translateX(400%);\r\n        transition: transform 0.4s ease;\r\n    }\r\n\r\n    .box:nth-of-type(even) {\r\n        transform: translateX(-400%);\r\n    }\r\n    \r\n    .box.show {\r\n        transform: translateX(0);\r\n    }\r\n    \r\n    .box h2 {\r\n        font-size: 45px;\r\n    }\r\n\r\n    @media (max-width: 576px) {\r\n        h1{\r\n            font-size: 25px;\r\n        }\r\n        .box h2 {\r\n            font-size: 20px;\r\n        }\r\n        .box {\r\n            width: 200px;\r\n            flex: 0 0 100px;\r\n            margin: 10px;\r\n        }\r\n    }\r\n`\r\n\r\nexport default ProgressSteps\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}