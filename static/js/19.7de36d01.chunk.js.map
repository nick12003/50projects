{"version":3,"sources":["components/TodoList.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["List","text","index","onDelete","useState","completed","setCompleted","className","onClick","onContextMenu","e","preventDefault","TodoList","styled","value","setValue","list","setList","mount","useRef","i","items","splice","useEffect","current","Storage","localStorage","getItem","JSON","parse","setItem","stringify","type","placeholder","autoComplete","onChange","target","onKeyUp","keyCode","length","item","push","map","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"qKAGMA,EAAO,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACzB,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,OACI,oBAAIC,UAAWF,EAAY,YAAc,GAAIG,QAAS,WAClDF,GAAcD,IACfI,cAAe,SAACC,GACfA,EAAEC,iBACFR,EAASD,IAJb,SAKID,KA+DNW,EAAWC,aA3DC,SAAC,GAAmB,IAAjBN,EAAgB,EAAhBA,UACjB,EAA0BH,mBAAS,IAAnC,mBAAOU,EAAP,KAAcC,EAAd,KACA,EAAwBX,mBAAS,IAAjC,mBAAOY,EAAP,KAAaC,EAAb,KACMC,EAAQC,mBACRhB,EAAW,SAACiB,GACd,IAAIC,EAAK,YAAOL,GAChBK,EAAMC,OAAOF,EAAG,GAChBH,EAAQI,IAgBZ,OAbAE,qBAAU,WACN,IAAKL,EAAMM,QAAS,CAChBN,EAAMM,SAAU,EAChB,IAAIC,EAAUC,aAAaC,QAAQ,YAC/BF,GACAR,EAAQW,KAAKC,MAAMJ,OAE5B,IAEHF,qBAAU,WACNG,aAAaI,QAAQ,WAAYF,KAAKG,UAAUf,MACjD,CAACA,IAGA,sBAAKT,UAAWA,EAAhB,UACI,uCACA,sBAAKA,UAAU,OAAf,UACI,uBACIyB,KAAK,OACLzB,UAAU,QACVO,MAAOA,EACPmB,YAAY,kBACZC,aAAa,MACbC,SAAU,SAACzB,GACPK,EAASL,EAAE0B,OAAOtB,QAEtBuB,QAAS,SAAC3B,GACN,GAAkB,KAAdA,EAAE4B,SAAkBxB,EAAMyB,OAAS,EAAG,CACtC,IAAIC,EAAI,YAAOxB,GACfwB,EAAKC,KAAK3B,GACVG,EAAQuB,GACRzB,EAAS,QAKrB,oBAAIR,UAAU,QAAd,SAEQS,EAAK0B,KAAI,SAACzC,EAAMmB,GACZ,OAAO,cAACpB,EAAD,CAAcC,KAAMA,EAAMC,MAAOkB,EAAGjB,SAAUA,GAAnCiB,WAKlC,qEAAuC,uBAAvC,sCAKKP,CAAH,ogDA4ECD,a,0FClJA,SAAS+B,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE","file":"static/js/19.7de36d01.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst List = ({ text, index, onDelete }) => {\r\n    const [completed, setCompleted] = useState(false);\r\n    return (\r\n        <li className={completed ? \"completed\" : \"\"} onClick={() => {\r\n            setCompleted(!completed);\r\n        }} onContextMenu={(e) => {\r\n            e.preventDefault();\r\n            onDelete(index);\r\n        }}>{text}</li>\r\n    )\r\n}\r\n\r\nconst Container = ({ className }) => {\r\n    const [value, setValue] = useState(\"\");\r\n    const [list, setList] = useState([]);\r\n    const mount = useRef();\r\n    const onDelete = (i) => {\r\n        let items = [...list];\r\n        items.splice(i, 1);\r\n        setList(items);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!mount.current) {\r\n            mount.current = true;\r\n            let Storage = localStorage.getItem(\"TodoList\");\r\n            if (Storage)\r\n                setList(JSON.parse(Storage));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"TodoList\", JSON.stringify(list));\r\n    }, [list]);\r\n\r\n    return (\r\n        <div className={className}>\r\n            <h1>todos</h1>\r\n            <div className=\"form\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"input\"\r\n                    value={value}\r\n                    placeholder=\"Enter your todo\"\r\n                    autoComplete=\"off\"\r\n                    onChange={(e) => {\r\n                        setValue(e.target.value);\r\n                    }}\r\n                    onKeyUp={(e) => {\r\n                        if (e.keyCode === 13 && value.length > 0) {\r\n                            let item = [...list];\r\n                            item.push(value);\r\n                            setList(item);\r\n                            setValue(\"\");\r\n                        }\r\n                    }}\r\n                />\r\n\r\n                <ul className=\"todos\">\r\n                    {\r\n                        list.map((text, i) => {\r\n                            return <List key={i} text={text} index={i} onDelete={onDelete} />\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n            <small>Left click to toggle completed. <br /> Right click to delete todo</small>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TodoList = styled(Container)`\r\n    & {\r\n        background-color: #f5f5f5;\r\n        color: #444;\r\n        font-family: 'Poppins', sans-serif;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        height: calc(100vh - 80px);\r\n        position: relative;\r\n        top: 80px;\r\n        margin: 0;\r\n        overflow-y: auto;\r\n        padding-bottom: 3rem;\r\n    }\r\n\r\n    &::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n    \r\n    h1 {\r\n        color: rgb(179, 131, 226);\r\n        font-size: 10rem;\r\n        text-align: center;\r\n        opacity: 0.4;\r\n    }\r\n    \r\n    .form {\r\n        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\r\n        max-width: 100%;\r\n        width: 400px;\r\n    }\r\n    \r\n    .input {\r\n        border: none;\r\n        color: #444;\r\n        font-size: 2rem;\r\n        padding: 1rem 2rem;\r\n        display: block;\r\n        width: 100%;\r\n    }\r\n    \r\n    .input::placeholder {\r\n        color: #d5d5d5;\r\n    }\r\n    \r\n    .input:focus {\r\n        outline-color: rgb(179, 131, 226);\r\n    }\r\n    \r\n    .todos {\r\n        background-color: #fff;\r\n        padding: 0;\r\n        margin: 0;\r\n        list-style-type: none;\r\n    }\r\n    \r\n    .todos li {\r\n        border-top: 1px solid #e5e5e5;\r\n        cursor: pointer;\r\n        font-size: 1.5rem;\r\n        padding: 1rem 2rem;\r\n    }\r\n    \r\n    .todos li.completed {\r\n        color: #b6b6b6;\r\n        text-decoration: line-through;\r\n    }\r\n    \r\n    small {\r\n        color: #b5b5b5;\r\n        margin-top: 3rem;\r\n        text-align: center;\r\n    }  \r\n`\r\n\r\nexport default TodoList\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}