{"version":3,"sources":["components/QuizApp.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["quizData","question","a","b","c","d","correct","QuizApp","styled","className","useState","answers","setAnswers","currentAnswer","setCurrentAnswer","onChangeAnswer","e","target","id","length","score","forEach","i","checkAnswer","onClick","type","name","onChange","checked","htmlFor","items","push","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"qKAGMA,EAAW,CACb,CACIC,SAAU,wCACVC,EAAG,OACHC,EAAG,IACHC,EAAG,SACHC,EAAG,aACHC,QAAS,KAEb,CACIL,SAAU,2BACVC,EAAG,uBACHC,EAAG,yBACHC,EAAG,0BACHC,EAAG,sBACHC,QAAS,KAEb,CACIL,SAAU,4BACVC,EAAG,4BACHC,EAAG,8BACHC,EAAG,6BACHC,EAAG,+CACHC,QAAS,KAEb,CACIL,SAAU,qCACVC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,EAAG,oBACHC,QAAS,MAoEXC,EAAUC,aAhEE,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACjB,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0CF,mBAAS,MAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEMC,EAAiB,SAACC,GACpBF,EAAiBE,EAAEC,OAAOC,KAW9B,OACI,qBAAKT,UAAWA,EAAhB,SACI,qBAAKA,UAAU,iBAAiBS,GAAG,OAAnC,SAEQP,EAAQQ,SAAWnB,EAASmB,OAAS,qCACjC,+CAbA,WAChB,IAAIC,EAAQ,EAKZ,OAJAT,EAAQU,SAAQ,SAACnB,EAAGoB,GACZpB,IAAMF,EAASsB,GAAGhB,UAClBc,GAAgB,MAElB,GAAN,OAAUA,EAAV,YAAmBpB,EAASmB,QAOMI,GAAlB,0BACA,wBAAQC,QAAS,WACbZ,EAAW,IACXE,EAAiB,OAFrB,uBAIE,qCACF,sBAAKL,UAAU,cAAf,UACI,6BAAKT,EAASW,EAAQQ,QAAQlB,WAC9B,+BACI,+BACI,uBAAOwB,KAAK,QAAQC,KAAK,SAASR,GAAG,IAAIT,UAAU,SAASkB,SAAUZ,EAAgBa,QAA2B,MAAlBf,IAC/F,uBAAOgB,QAAQ,IAAf,SAAoB7B,EAASW,EAAQQ,QAAQjB,OAGjD,+BACI,uBAAOuB,KAAK,QAAQC,KAAK,SAASR,GAAG,IAAIT,UAAU,SAASkB,SAAUZ,EAAgBa,QAA2B,MAAlBf,IAC/F,uBAAOgB,QAAQ,IAAf,SAAoB7B,EAASW,EAAQQ,QAAQhB,OAGjD,+BACI,uBAAOsB,KAAK,QAAQC,KAAK,SAASR,GAAG,IAAIT,UAAU,SAASkB,SAAUZ,EAAgBa,QAA2B,MAAlBf,IAC/F,uBAAOgB,QAAQ,IAAf,SAAoB7B,EAASW,EAAQQ,QAAQf,OAGjD,+BACI,uBAAOqB,KAAK,QAAQC,KAAK,SAASR,GAAG,IAAIT,UAAU,SAASkB,SAAUZ,EAAgBa,QAA2B,MAAlBf,IAC/F,uBAAOgB,QAAQ,IAAf,SAAoB7B,EAASW,EAAQQ,QAAQd,aAIzD,wBAAQmB,QAAS,WACb,IAAIM,EAAK,YAAOnB,GAChBmB,EAAMC,KAAKlB,GACXD,EAAWkB,GACXhB,EAAiB,OAJrB,6BAaRN,CAAH,o4CAuEED,a,0FCzKA,SAASyB,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE","file":"static/js/14.54a743ae.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst quizData = [\r\n    {\r\n        question: \"Which language runs in a web browser?\",\r\n        a: \"Java\",\r\n        b: \"C\",\r\n        c: \"Python\",\r\n        d: \"JavaScript\",\r\n        correct: \"d\",\r\n    },\r\n    {\r\n        question: \"What does CSS stand for?\",\r\n        a: \"Central Style Sheets\",\r\n        b: \"Cascading Style Sheets\",\r\n        c: \"Cascading Simple Sheets\",\r\n        d: \"Cars SUVs Sailboats\",\r\n        correct: \"b\",\r\n    },\r\n    {\r\n        question: \"What does HTML stand for?\",\r\n        a: \"Hypertext Markup Language\",\r\n        b: \"Hypertext Markdown Language\",\r\n        c: \"Hyperloop Machine Language\",\r\n        d: \"Helicopters Terminals Motorboats Lamborginis\",\r\n        correct: \"a\",\r\n    },\r\n    {\r\n        question: \"What year was JavaScript launched?\",\r\n        a: \"1996\",\r\n        b: \"1995\",\r\n        c: \"1994\",\r\n        d: \"none of the above\",\r\n        correct: \"b\",\r\n    },\r\n];\r\n\r\nconst Container = ({ className }) => {\r\n    const [answers, setAnswers] = useState([]);\r\n    const [currentAnswer, setCurrentAnswer] = useState(null);\r\n\r\n    const onChangeAnswer = (e) => {\r\n        setCurrentAnswer(e.target.id);\r\n    }\r\n\r\n    const checkAnswer = () => {\r\n        let score = 0;\r\n        answers.forEach((a, i) => {\r\n            if (a === quizData[i].correct)\r\n                score = score + 1;\r\n        });\r\n        return `${score}/${quizData.length}`;\r\n    }\r\n    return (\r\n        <div className={className}>\r\n            <div className=\"quiz-container\" id=\"quiz\">\r\n                {\r\n                    answers.length === quizData.length ? <>\r\n                        <h2>You answered {checkAnswer()} questions correctly</h2>\r\n                        <button onClick={() => {\r\n                            setAnswers([]);\r\n                            setCurrentAnswer(null);\r\n                        }}>Reload</button>\r\n                    </> : <>\r\n                        <div className=\"quiz-header\">\r\n                            <h2>{quizData[answers.length].question}</h2>\r\n                            <ul>\r\n                                <li>\r\n                                    <input type=\"radio\" name=\"answer\" id=\"a\" className=\"answer\" onChange={onChangeAnswer} checked={currentAnswer === \"a\"} />\r\n                                    <label htmlFor=\"a\">{quizData[answers.length].a}</label>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <input type=\"radio\" name=\"answer\" id=\"b\" className=\"answer\" onChange={onChangeAnswer} checked={currentAnswer === \"b\"} />\r\n                                    <label htmlFor=\"b\">{quizData[answers.length].b}</label>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <input type=\"radio\" name=\"answer\" id=\"c\" className=\"answer\" onChange={onChangeAnswer} checked={currentAnswer === \"c\"} />\r\n                                    <label htmlFor=\"c\">{quizData[answers.length].c}</label>\r\n                                </li>\r\n\r\n                                <li>\r\n                                    <input type=\"radio\" name=\"answer\" id=\"d\" className=\"answer\" onChange={onChangeAnswer} checked={currentAnswer === \"d\"} />\r\n                                    <label htmlFor=\"d\">{quizData[answers.length].d}</label>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                        <button onClick={() => {\r\n                            let items = [...answers];\r\n                            items.push(currentAnswer);\r\n                            setAnswers(items);\r\n                            setCurrentAnswer(null);\r\n                        }}>Submit</button>\r\n                    </>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst QuizApp = styled(Container)`\r\n    & {\r\n        background-color: #b8c6db;\r\n        background-image: linear-gradient(315deg, #b8c6db 0%, #f5f7fa 100%);\r\n        font-family: 'Poppins', sans-serif;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        height: 100vh;\r\n        overflow: hidden;\r\n        margin: 0;\r\n    }\r\n    \r\n    .quiz-container {\r\n        background-color: #fff;\r\n        border-radius: 10px;\r\n        box-shadow: 0 0 10px 2px rgba(100, 100, 100, 0.1);\r\n        width: 600px;\r\n        overflow: hidden;\r\n    }\r\n    \r\n    .quiz-header {\r\n        padding: 4rem;\r\n    }\r\n    \r\n    h2 {\r\n        padding: 1rem;\r\n        text-align: center;\r\n        margin: 0;\r\n    }\r\n    \r\n    ul {\r\n        list-style-type: none;\r\n        padding: 0;\r\n    }\r\n    \r\n    ul li {\r\n        font-size: 1.2rem;\r\n        margin: 1rem 0;\r\n    }\r\n    \r\n    ul li label {\r\n        cursor: pointer;\r\n    }\r\n\r\n    .answer{\r\n        margin-right:10px;\r\n    }\r\n\r\n    button {\r\n        background-color: #8e44ad;\r\n        color: #fff;\r\n        border: none;\r\n        display: block;\r\n        width: 100%;\r\n        cursor: pointer;\r\n        font-size: 1.1rem;\r\n        font-family: inherit;\r\n        padding: 1.3rem;\r\n    }\r\n    \r\n    button:hover {\r\n        background-color: #732d91;\r\n    }\r\n    \r\n    button:focus {\r\n        outline: none;\r\n        background-color: #5e3370;\r\n    }\r\n`\r\n\r\nexport default QuizApp\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}