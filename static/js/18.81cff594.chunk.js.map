{"version":3,"sources":["components/ToastNotification.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["ToastNotification","styled","className","useState","toasts","setToasts","messages","types","useEffect","interval","setInterval","length","console","log","items","splice","clearInterval","map","i","type","message","onClick","push","Math","floor","random","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"qKAwDMA,EAAoBC,aArDR,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACjB,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACMC,EAAW,CACb,cACA,cACA,gBACA,gBAEEC,EAAQ,CAAC,OAAQ,UAAW,SAyBlC,OAfAC,qBAAU,WACN,IAAMC,EAAWC,aAAY,WACzB,GAAIN,EAAOO,OAAQ,CACfC,QAAQC,IAAI,SACZ,IAAIC,EAAK,YAAOV,GAChBU,EAAMC,OAAO,EAAG,GAChBV,EAAUS,MAEf,KAEH,OAAO,WACHE,cAAcP,MAEnB,CAACL,IAGA,sBAAKF,UAAWA,EAAhB,UACI,qBAAKA,UAAU,SAAf,SAEQE,EAAOa,KAAI,WAAoBC,GAAO,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,QAChB,OAAO,qBAAalB,UAAS,gBAAWiB,GAAjC,SAA0CC,GAAhCF,QAI7B,wBAAQhB,UAAU,MAAMmB,QAAS,WAC7B,IAAIP,EAAK,YAAOV,GAChBU,EAAMQ,KAAK,CAAEH,KA7BdZ,EAAMgB,KAAKC,MAAMD,KAAKE,SAAWlB,EAAMI,SA6BFS,QAjCrCd,EAASiB,KAAKC,MAAMD,KAAKE,SAAWnB,EAASK,WAkC5CN,EAAUS,IAHd,oCAWcb,CAAH,gvCA+DRD,a,0FCnHA,SAAS0B,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE","file":"static/js/18.81cff594.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst Container = ({ className }) => {\r\n    const [toasts, setToasts] = useState([]);\r\n    const messages = [\r\n        'Message One',\r\n        'Message Two',\r\n        'Message Three',\r\n        'Message Four',\r\n    ];\r\n    const types = ['info', 'success', 'error'];\r\n\r\n    const getRandomMessage = () => {\r\n        return messages[Math.floor(Math.random() * messages.length)]\r\n    }\r\n\r\n    const getRandomType = () => {\r\n        return types[Math.floor(Math.random() * types.length)]\r\n    }\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (toasts.length) {\r\n                console.log(\"enter\");\r\n                let items = [...toasts]\r\n                items.splice(0, 1);\r\n                setToasts(items);\r\n            }\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        }\r\n    }, [toasts]);\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div className=\"toasts\">\r\n                {\r\n                    toasts.map(({ type, message }, i) => {\r\n                        return <div key={i} className={`toast ${type}`}>{message}</div>\r\n                    })\r\n                }\r\n            </div>\r\n            <button className=\"btn\" onClick={() => {\r\n                let items = [...toasts];\r\n                items.push({ type: getRandomType(), message: getRandomMessage() });\r\n                setToasts(items);\r\n            }}>\r\n                Show Notification\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ToastNotification = styled(Container)`\r\n    & {\r\n        background-color: rebeccapurple;\r\n        font-family: 'Poppins', sans-serif;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        justify-content: center;\r\n        height: calc(100vh - 80px);\r\n        position: relative;\r\n        top: 80px;\r\n        overflow: hidden;\r\n        margin: 0;\r\n    }\r\n    \r\n    .btn {\r\n        background-color: #ffffff;\r\n        color: rebeccapurple;\r\n        font-family: inherit;\r\n        font-weight: bold;\r\n        padding: 1rem;\r\n        border-radius: 5px;\r\n        border: none;\r\n        cursor: pointer;\r\n    }\r\n    \r\n    .btn:focus {\r\n        outline: none;\r\n    }\r\n    \r\n    .btn:active {\r\n        transform: scale(0.98);\r\n    }\r\n    \r\n    .toasts {\r\n        position: fixed;\r\n        bottom: 10px;\r\n        right: 10px;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: flex-end;\r\n    }\r\n    \r\n    .toast {\r\n        background-color: #fff;\r\n        border-radius: 5px;\r\n        padding: 1rem 2rem;\r\n        margin: 0.5rem;\r\n    }\r\n    \r\n    .toast.info {\r\n        color: rebeccapurple;\r\n    }\r\n    \r\n    .toast.success {\r\n        color: green;\r\n    }\r\n    \r\n    .toast.error {\r\n        color: red;\r\n    }\r\n`\r\n\r\nexport default ToastNotification\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}